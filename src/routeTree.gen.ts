/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ClientImport } from './routes/client'
import { Route as ClientJumpStartCourseImport } from './routes/client/jumpStartCourse'
import { Route as ClientClientImport } from './routes/client/client'

// Create/Update Routes

const ClientRoute = ClientImport.update({
  id: '/client',
  path: '/client',
  getParentRoute: () => rootRoute,
} as any)

const ClientJumpStartCourseRoute = ClientJumpStartCourseImport.update({
  id: '/jumpStartCourse',
  path: '/jumpStartCourse',
  getParentRoute: () => ClientRoute,
} as any)

const ClientClientRoute = ClientClientImport.update({
  id: '/client',
  path: '/client',
  getParentRoute: () => ClientRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/client': {
      id: '/client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientImport
      parentRoute: typeof rootRoute
    }
    '/client/client': {
      id: '/client/client'
      path: '/client'
      fullPath: '/client/client'
      preLoaderRoute: typeof ClientClientImport
      parentRoute: typeof ClientImport
    }
    '/client/jumpStartCourse': {
      id: '/client/jumpStartCourse'
      path: '/jumpStartCourse'
      fullPath: '/client/jumpStartCourse'
      preLoaderRoute: typeof ClientJumpStartCourseImport
      parentRoute: typeof ClientImport
    }
  }
}

// Create and export the route tree

interface ClientRouteChildren {
  ClientClientRoute: typeof ClientClientRoute
  ClientJumpStartCourseRoute: typeof ClientJumpStartCourseRoute
}

const ClientRouteChildren: ClientRouteChildren = {
  ClientClientRoute: ClientClientRoute,
  ClientJumpStartCourseRoute: ClientJumpStartCourseRoute,
}

const ClientRouteWithChildren =
  ClientRoute._addFileChildren(ClientRouteChildren)

export interface FileRoutesByFullPath {
  '/client': typeof ClientRouteWithChildren
  '/client/client': typeof ClientClientRoute
  '/client/jumpStartCourse': typeof ClientJumpStartCourseRoute
}

export interface FileRoutesByTo {
  '/client': typeof ClientRouteWithChildren
  '/client/client': typeof ClientClientRoute
  '/client/jumpStartCourse': typeof ClientJumpStartCourseRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/client': typeof ClientRouteWithChildren
  '/client/client': typeof ClientClientRoute
  '/client/jumpStartCourse': typeof ClientJumpStartCourseRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/client' | '/client/client' | '/client/jumpStartCourse'
  fileRoutesByTo: FileRoutesByTo
  to: '/client' | '/client/client' | '/client/jumpStartCourse'
  id: '__root__' | '/client' | '/client/client' | '/client/jumpStartCourse'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ClientRoute: typeof ClientRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ClientRoute: ClientRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/client"
      ]
    },
    "/client": {
      "filePath": "client.tsx",
      "children": [
        "/client/client",
        "/client/jumpStartCourse"
      ]
    },
    "/client/client": {
      "filePath": "client/client.tsx",
      "parent": "/client"
    },
    "/client/jumpStartCourse": {
      "filePath": "client/jumpStartCourse.tsx",
      "parent": "/client"
    }
  }
}
ROUTE_MANIFEST_END */
